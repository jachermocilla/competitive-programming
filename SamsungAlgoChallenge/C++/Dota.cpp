//#include "stdafx.h" //enable this line for windows users

/////////////////////////////////////////////////////////////////////////////////////////////
/*
	DO NOT EDIT THIS FILE!!!
	WRITE YOUR SOLUTION IN mySolution.cpp
*/
/////////////////////////////////////////////////////////////////////////////////////////////
#include <stdio.h>
#include <time.h>

#define MAX_N 25


extern int mySolution(int N, int H1row, int H1col, int H2row, int H2col, int T1row, int T1col, int T2row, int T2col, int obstacle[MAX_N*MAX_N]);

int main(void)
{
	int test_case;
	int T;
	int N;
	int Answer;
	int obs[MAX_N*MAX_N];
	int H1row, H1col, H2row, H2col, T1row, T1col, T2row, T2col;
	clock_t TOTAL_TIME = 0;


	freopen("sample_input.txt", "r", stdin);
	setbuf(stdout, NULL);

	/*
	   Read each test case from standard input.
	*/
	scanf("%d", &T); //T is the number of test cases
	for (test_case = 1; test_case <= T; test_case++)
	{
		scanf("%d", &N); //the size of the map
		scanf("%d %d %d %d", &H1row, &H1col, &T1row, &T1col);  //Hero 1 start and target position
		scanf("%d %d %d %d", &H2row, &H2col, &T2row, &T2col); //Hero 2 start and target position

		for (int i = 0; i < N*N; i++) {
			scanf("%d", &obs[i]); //obstacle map
		}
		for (int i = N*N; i < MAX_N * MAX_N; i++) {
			obs[i] = 0;
		}
		
		clock_t TIME = clock();

		Answer = mySolution(N, H1row, H1col, H2row, H2col, T1row, T1col, T2row, T2col, obs);
		
		TIME = (clock() - TIME) / (CLOCKS_PER_SEC / 1000);
		TOTAL_TIME += TIME;

		// Print the answer to standard output(screen).
		printf("#%d %d\n", test_case, Answer);
	}
	printf("Execution Time:  %d\n", TOTAL_TIME);
	return 0; // Your program should return 0 on normal termination.
}
